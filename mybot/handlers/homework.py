# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π
from telebot import types
from database.storage import Storage
from utils.states import set_state, get_state
from config.config import USER_STATES, DEFAULT_HOMEWORK_DATA
from handlers.menu import show_main_menu
import importlib

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def register_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == 'homework_ir3')
    def homework_handler(call):
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn1 = types.InlineKeyboardButton('üìù –ó–∞–ø–∏—Å–∏', callback_data='notes')
        btn2 = types.InlineKeyboardButton('üëÅ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –î/–ó', callback_data='view_homework')
        btn3 = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='menu')
        markup.row(btn1, btn2)
        markup.row(btn3)
        
        bot.edit_message_text(
            "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏:",
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )

    @bot.callback_query_handler(func=lambda call: call.data == 'view_homework')
    def view_homework(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π"""
        try:
            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from mybot.config import config
            importlib.reload(config)
            
            homework_text = "üìö –¢–µ–∫—É—â–µ–µ –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n"
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            for subject, hw in config.DEFAULT_HOMEWORK_DATA.items():
                emoji = config.SUBJECT_EMOJI.get(subject, "üìò")
                if hw.strip():
                    homework_text += f"{emoji} {subject}:\n‚îî {hw}\n\n"
                else:
                    homework_text += f"{emoji} {subject}:\n‚îî –ù–µ –∑–∞–¥–∞–Ω–æ\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='homework_ir3')
            markup.add(btn_back)
            
            bot.edit_message_text(
                homework_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ view_homework: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == 'menu')
    def main_menu_handler(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        try:
            from handlers.menu import show_main_menu
            try:
                show_main_menu(bot, call)
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise e
            bot.answer_callback_query(call.id)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ main_menu_handler: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == 'notes')
    def notes_menu(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
            if call.from_user.id in user_states:
                del user_states[call.from_user.id]
                
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ (–¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å note_ –¥–ª—è –æ—Ç–ª–∏—á–∏—è –æ—Ç –¥—Ä—É–≥–∏—Ö callback_data)
            btn_add = types.InlineKeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_add')
            btn_view = types.InlineKeyboardButton('üëÄ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏', callback_data='note_view')
            btn_edit = types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_edit')
            btn_delete = types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_delete')
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='homework_ir3')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup.add(btn_add, btn_view)
            markup.add(btn_edit, btn_delete)
            markup.add(btn_back)

            bot.edit_message_text(
                "üìã –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏:",
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ notes_menu: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == 'note_add')
    def add_note(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–µ–¥–º–µ—Ç–∞
            user_states[call.from_user.id] = 'waiting_subject'
            
            markup = types.InlineKeyboardMarkup()
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='notes')
            markup.add(btn_cancel)
            
            bot.edit_message_text(
                f"üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏:\n"
                f'–ù–∞–ø—Ä–∏–º–µ—Ä: –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞, –§–∏–∑–∏–∫–∞, –ò—Å—Ç–æ—Ä–∏—è –∏ —Ç.–¥.',
                call.message.chat.id,
                call.message.message_id,
                reply_markup=markup
            )
            bot.register_next_step_handler(call.message, process_subject_step, call.message.message_id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ add_note: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def process_subject_step(message, original_message_id):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id not in user_states or user_states[message.from_user.id] != 'waiting_subject':
                return
                
            subject = message.text
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            user_states[message.from_user.id] = 'waiting_homework'
            
            markup = types.InlineKeyboardMarkup()
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='notes')
            markup.add(btn_cancel)
            
            try:
                bot.edit_message_text(
                    f"üìö –ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏: {subject}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:",
                    chat_id=message.chat.id,
                    message_id=original_message_id,
                    reply_markup=markup
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise e
            
            bot.register_next_step_handler(message, process_homework_step, original_message_id, subject)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_subject_step: {e}")
            show_error_message(message.chat.id, original_message_id)

    def process_homework_step(message, original_message_id, subject):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id not in user_states or user_states[message.from_user.id] != 'waiting_homework':
                return
                
            homework_text = message.text
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id in user_states:
                del user_states[message.from_user.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–µ–∫—Å—Ç–æ–º –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(message.from_user.id)
            
            if user_id not in user_data:
                user_data[user_id] = {}
            if 'homework' not in user_data[user_id]:
                user_data[user_id]['homework'] = {}
                
            user_data[user_id]['homework'][subject] = homework_text
            storage.save_data(user_data)
            
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                f"‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!\n\n"
                f"üìö –ó–∞–ø–∏—Å—å: {subject}\n"
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: {homework_text}",
                chat_id=message.chat.id,
                message_id=original_message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_homework_step: {e}")
            show_error_message(message.chat.id, original_message_id)

    @bot.callback_query_handler(func=lambda call: call.data == 'note_view')
    def view_note(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
        try:
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(call.from_user.id)
            
            if user_id not in user_data or 'homework' not in user_data[user_id] or not user_data[user_id]['homework']:
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
                markup.add(btn_back)
                
                bot.edit_message_text(
                    "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
                return
            
            homework_text = "üìö –í–∞—à–∏ –∑–∞–ø–∏—Å–∏:\n\n"
            for subject, hw in user_data[user_id]['homework'].items():
                homework_text += f"üìå {subject}:\n{hw}\n\n"
            
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                homework_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ view_ote: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data == 'note_edit')
    def edit_note(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if call.from_user.id in user_states:
                del user_states[call.from_user.id]
                
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(call.from_user.id)
            
            if user_id not in user_data or 'homework' not in user_data[user_id] or not user_data[user_id]['homework']:
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
                markup.add(btn_back)
                
                bot.edit_message_text(
                    "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
                return
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            for subject in user_data[user_id]['homework'].keys():
                btn = types.InlineKeyboardButton(f"üìö {subject}", callback_data=f"note_edit_{subject}")
                markup.add(btn)
            
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                "üìù –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ edit_note: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('note_edit_'))
    def edit_homework(call):
        try:
            if not call.data.startswith('note_edit_option_'):
                subject = call.data.replace('note_edit_', '')
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
                storage = Storage()
                user_data = storage.load_data()
                user_id = str(call.from_user.id)
                current_homework = user_data[user_id]['homework'].get(subject, "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≤—ã–±–æ—Ä–æ–º —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å
                markup = types.InlineKeyboardMarkup(row_width=1)
                btn_name = types.InlineKeyboardButton('üìù –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞', 
                                                    callback_data=f'note_edit_option_name_{subject}')
                btn_desc = types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è', 
                                                    callback_data=f'note_edit_option_desc_{subject}')
                btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='notes')
                
                markup.add(btn_name, btn_desc, btn_cancel)
                
                bot.edit_message_text(
                    f"üìö –ó–∞–ø–∏—Å—å: {subject}\n"
                    f"üìù –¢–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:\n{current_homework}\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ edit_homework: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('note_edit_option_'))
    def process_edit_option(call):
        try:
            # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data
            _, option, action, subject = call.data.split('_')
            
            markup = types.InlineKeyboardMarkup()
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='notes')
            markup.add(btn_cancel)
            
            if action == 'name':
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
                user_states[call.from_user.id] = 'waiting_new_name'
                message_text = f"üìö –¢–µ–∫—É—â–∏–π –ø—Ä–µ–¥–º–µ—Ç: {subject}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞:"
            else:  # action == 'desc'
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
                user_states[call.from_user.id] = 'waiting_new_desc'
                message_text = f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n\nüìù –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:"
            
            bot.edit_message_text(
                message_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è
            if action == 'name':
                bot.register_next_step_handler(call.message, process_new_name_step, call.message.message_id, subject)
            else:
                bot.register_next_step_handler(call.message, process_new_desc_step, call.message.message_id, subject)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_edit_option: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def process_new_name_step(message, original_message_id, old_subject):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id not in user_states or user_states[message.from_user.id] != 'waiting_new_name':
                return
                
            new_subject = message.text
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id in user_states:
                del user_states[message.from_user.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(message.from_user.id)
            
            if old_subject in user_data[user_id]['homework']:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                homework_text = user_data[user_id]['homework'][old_subject]
                # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –∫–ª—é—á
                del user_data[user_id]['homework'][old_subject]
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –∫–ª—é—á —Å —Ç–µ–º –∂–µ –∑–Ω–∞—á–µ–Ω–∏–µ–º
                user_data[user_id]['homework'][new_subject] = homework_text
                storage.save_data(user_data)
                
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
                markup.add(btn_back)
                
                bot.edit_message_text(
                    f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!\n\n"
                    f"üìö –°—Ç–∞—Ä–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {old_subject}\n"
                    f"üìö –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {new_subject}",
                    chat_id=message.chat.id,
                    message_id=original_message_id,
                    reply_markup=markup
                )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_new_name_step: {e}")
            show_error_message(message.chat.id, original_message_id)

    def process_new_desc_step(message, original_message_id, subject):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id not in user_states or user_states[message.from_user.id] != 'waiting_new_desc':
                return
                
            new_homework = message.text
            
            # –£–¥–∞–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if message.from_user.id in user_states:
                del user_states[message.from_user.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤—ã–º –æ–ø–∏—Å–∞–Ω–∏–µ–º
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except:
                pass
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(message.from_user.id)
            
            user_data[user_id]['homework'][subject] = new_homework
            storage.save_data(user_data)
            
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                f"üìö –ü—Ä–µ–¥–º–µ—Ç: {subject}\n"
                f"üìù –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {new_homework}",
                chat_id=message.chat.id,
                message_id=original_message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_new_desc_step: {e}")
            show_error_message(message.chat.id, original_message_id)

    @bot.callback_query_handler(func=lambda call: call.data == 'note_delete')
    def delete_note(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏"""
        try:
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(call.from_user.id)
            
            if user_id not in user_data or 'homework' not in user_data[user_id] or not user_data[user_id]['homework']:
                markup = types.InlineKeyboardMarkup()
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
                markup.add(btn_back)
                
                bot.edit_message_text(
                    "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
                return
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            for subject in user_data[user_id]['homework'].keys():
                btn = types.InlineKeyboardButton(f"üóë {subject}", callback_data=f"note_delete_{subject}")
                markup.add(btn)
            
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                "üóë –í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–ø–∏—Å—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ delete_note: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('note_delete_'))
    def confirm_delete(call):
        try:
            subject = call.data.replace('note_delete_', '')
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_confirm = types.InlineKeyboardButton('‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data=f'note_confirm_delete_{subject}')
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='notes')
            markup.add(btn_confirm, btn_cancel)
            
            bot.edit_message_text(
                f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}'?",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ confirm_delete: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('note_confirm_delete_'))
    def process_delete(call):
        try:
            subject = call.data.replace('note_confirm_delete_', '')
            
            # –£–¥–∞–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(call.from_user.id)
            
            if subject in user_data[user_id]['homework']:
                del user_data[user_id]['homework'][subject]
                storage.save_data(user_data)
            
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É '{subject}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ process_delete: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    def show_error_message(chat_id, message_id):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
        try:
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            markup.add(btn_back)
            
            bot.edit_message_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                chat_id=chat_id,
                message_id=message_id,
                reply_markup=markup
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback_query, —á—Ç–æ–±—ã —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    @bot.callback_query_handler(func=lambda call: True)
    def handle_all_callbacks(call):
        """–û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        if call.data == 'notes' or call.data == 'homework_ir3':
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é
            if call.from_user.id in user_states:
                del user_states[call.from_user.id]

    @bot.callback_query_handler(func=lambda call: call.data == 'note_view')
    def view_note(call):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π"""
        try:
            storage = Storage()
            user_data = storage.load_data()
            user_id = str(call.from_user.id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
            has_user_homework = (user_id in user_data and 
                               'homework' in user_data[user_id] and 
                               user_data[user_id]['homework'])
            
            if not has_user_homework:
                # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º DEFAULT_HOMEWORK_DATA
                homework_text = "üìö –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π:\n\n"
                for subject, hw in DEFAULT_HOMEWORK_DATA.items():
                    homework_text += f"üìå {subject}:\n{hw}\n\n"
                
                markup = types.InlineKeyboardMarkup(row_width=2)
                btn_add = types.InlineKeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∑–∞–ø–∏—Å—å', callback_data='note_add')
                btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
                markup.add(btn_add)
                markup.add(btn_back)
                
                bot.edit_message_text(
                    homework_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
                return
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            homework_text = "üìö –í–∞—à–∏ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            for subject, hw in user_data[user_id]['homework'].items():
                homework_text += f"üìå {subject}:\n{hw}\n\n"
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_add = types.InlineKeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_add')
            btn_edit = types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_edit')
            btn_delete = types.InlineKeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å', callback_data='note_delete')
            btn_default = types.InlineKeyboardButton('üëÅ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –î/–ó', callback_data='view_default_homework')
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='notes')
            
            markup.add(btn_add, btn_edit)
            markup.add(btn_delete, btn_default)
            markup.add(btn_back)
            
            bot.edit_message_text(
                homework_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ view_note: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
