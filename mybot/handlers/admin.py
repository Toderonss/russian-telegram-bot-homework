from telebot import types
from mybot.config.config import ADMIN_IDS, USER_STATES, DEFAULT_HOMEWORK_DATA, SUBJECT_EMOJI
from mybot.handlers.menu import show_main_menu
import json
import os
import sys
import importlib

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {}

def save_admins(admins):
    config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.py')
    
    try:
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        with open(config_path + '.bak', 'w', encoding='utf-8') as file:
            file.write(content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫—É —Å ADMIN_IDS
        lines = content.split('\n')
        admin_list_str = "', '".join(admins)
        new_admin_line = f"ADMIN_IDS = ['{admin_list_str}']"
        
        # –ò—â–µ–º –∏ –∑–∞–º–µ–Ω—è–µ–º —Å—Ç—Ä–æ–∫—É —Å ADMIN_IDS
        for i, line in enumerate(lines):
            if line.strip().startswith('ADMIN_IDS'):
                lines[i] = new_admin_line
                break
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ñ–∞–π–ª –æ–±—Ä–∞—Ç–Ω–æ
        new_content = '\n'.join(lines)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        if 'BOT_TOKEN' not in new_content:
            print("–û—à–∏–±–∫–∞: BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–æ–Ω—Ñ–∏–≥–µ")
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
            with open(config_path + '.bak', 'r', encoding='utf-8') as file:
                content = file.read()
            with open(config_path, 'w', encoding='utf-8') as file:
                file.write(content)
            return False
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'w', encoding='utf-8') as file:
            file.write(new_content)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é ADMIN_IDS
        global ADMIN_IDS
        ADMIN_IDS = admins
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
        try:
            import importlib
            import mybot.config.config as config
            importlib.reload(config)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–æ–¥—É–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç ADMIN_IDS
            from mybot.handlers import base, menu
            importlib.reload(base)
            importlib.reload(menu)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
            importlib.reload(sys.modules[__name__])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–æ–≤: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
        try:
            with open(config_path + '.bak', 'r', encoding='utf-8') as file:
                content = file.read()
            with open(config_path, 'w', encoding='utf-8') as file:
                file.write(content)
        except Exception as restore_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏–∑ –±—ç–∫–∞–ø–∞: {restore_error}")
        return False

def register_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == 'admin_panel')
    def admin_panel(call):
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            if str(call.from_user.id) not in ADMIN_IDS:
                print(f"–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ. ID {call.from_user.id} –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤")
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
            if call.message.chat.id in user_states:
                del user_states[call.message.chat.id]
            
            markup = types.InlineKeyboardMarkup(row_width=2)
            
            # –ü–µ—Ä–≤—ã–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            btn_view_hw = types.InlineKeyboardButton('üëÅ –ü—Ä–æ—Å–º–æ—Ç—Ä –î/–ó', callback_data='admin_view_hw')
            btn_edit_hw = types.InlineKeyboardButton('‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã –î/–ó', callback_data='admin_edit_hw')
            markup.add(btn_view_hw, btn_edit_hw)
            
            # –í—Ç–æ—Ä–æ–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            btn_add_admin = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞', callback_data='admin_add')
            btn_admin_list = types.InlineKeyboardButton('üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤', callback_data='admin_list')
            markup.add(btn_add_admin, btn_admin_list)
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='main_menu')
            markup.add(btn_back)

            bot.edit_message_text(
                "üëë –ü–∞–Ω–µ–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_panel: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
    def back_to_main_menu(call):
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            if call.message.chat.id in user_states:
                del user_states[call.message.chat.id]
            show_main_menu(bot, call)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == 'admin_add')
    def admin_add(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ ID
            user_states[call.message.chat.id] = 'waiting_admin_id'

            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')
            markup.add(btn_back)

            msg = bot.edit_message_text(
                "üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
            # –†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            def register_next_handler():
                bot.register_next_step_handler_by_chat_id(
                    call.message.chat.id, 
                    lambda m: process_new_admin_id(m, bot, call.message.message_id, register_next_handler)
                )
            
            # –ü–µ—Ä–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            register_next_handler()
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_add: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == 'admin_list')
    def admin_list(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            markup = types.InlineKeyboardMarkup()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
            for admin_id in ADMIN_IDS:
                try:
                    user = bot.get_chat(admin_id)
                    btn_delete = types.InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å {user.first_name}", 
                        callback_data=f'admin_delete_{admin_id}'
                    )
                except:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                    btn_delete = types.InlineKeyboardButton(
                        f"‚ùå –£–¥–∞–ª–∏—Ç—å ID: {admin_id}", 
                        callback_data=f'admin_delete_{admin_id}'
                    )
                markup.add(btn_delete)
            
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')
            markup.add(btn_back)

            admin_list_text = "üë• –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
            for i, admin_id in enumerate(ADMIN_IDS, 1):
                try:
                    user = bot.get_chat(admin_id)
                    admin_list_text += f"{i}. {user.first_name} (ID: {admin_id})\n"
                except:
                    admin_list_text += f"{i}. ID: {admin_id}\n"

            bot.edit_message_text(
                admin_list_text,
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_list: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('admin_delete_'))
    def delete_admin(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            admin_to_delete = call.data.replace('admin_delete_', '')
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω —É–¥–∞–ª–∏—Ç—å —Å–∞–º —Å–µ–±—è
            if admin_to_delete == str(call.from_user.id):
                bot.answer_callback_query(call.id, "‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–∞–º–∏ —Å–µ–±—è")
                return
            
            # –£–¥–∞–ª—è–µ–º –∞–¥–º–∏–Ω–∞
            admins = list(ADMIN_IDS)
            if admin_to_delete in admins:
                admins.remove(admin_to_delete)
                if save_admins(admins):
                    try:
                        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        bot.send_message(
                            admin_to_delete,
                            "‚ö†Ô∏è –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω—ã."
                        )
                        
                        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
                        markup_new = types.InlineKeyboardMarkup()
                        btn_menu = types.InlineKeyboardButton('üìã –û—Ç–∫—Ä—ã—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')
                        markup_new.add(btn_menu)
                        bot.send_message(
                            admin_to_delete,
                            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é:",
                            reply_markup=markup_new
                        )
                    except Exception as e:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–Ω–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
                
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
                    admin_list(call)
                    bot.answer_callback_query(call.id, "‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
                else:
                    bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π")
            else:
                bot.answer_callback_query(call.id, "‚ùå –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ delete_admin: {e}")
            bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")

    @bot.callback_query_handler(func=lambda call: call.data == 'admin_view_hw')
    def admin_view_homework(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from mybot.config import config
            importlib.reload(config)

            homework_text = "üìö –î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:\n\n"
            for subject, hw in config.DEFAULT_HOMEWORK_DATA.items():
                emoji = SUBJECT_EMOJI.get(subject, "üìò")
                if hw.strip():
                    homework_text += f"{emoji} {subject}:\n‚îî {hw}\n\n"
                else:
                    homework_text += f"{emoji} {subject}:\n‚îî –ù–µ –∑–∞–¥–∞–Ω–æ\n\n"

            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')
            markup.add(btn_back)

            try:
                bot.edit_message_text(
                    homework_text,
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise e
            bot.answer_callback_query(call.id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_view_homework: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == 'admin_edit_hw')
    def admin_edit_homework(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
            from mybot.config import config
            importlib.reload(config)

            markup = types.InlineKeyboardMarkup(row_width=3)
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            for i, subject in enumerate(config.DEFAULT_HOMEWORK_DATA.keys()):
                emoji = SUBJECT_EMOJI.get(subject, "üìò")
                btn_edit = types.InlineKeyboardButton(f"{emoji} {subject}", callback_data=f'hw_edit_{i}')
                btn_delete = types.InlineKeyboardButton(f"‚ùå", callback_data=f'hw_del_{i}')
                btn_emoji = types.InlineKeyboardButton(f"üòÄ", callback_data=f'hw_emoji_{i}')
                markup.add(btn_edit, btn_emoji, btn_delete)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            user_states[call.message.chat.id] = {
                'subjects_map': list(config.DEFAULT_HOMEWORK_DATA.keys())
            }
            
            # –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
            btn_add = types.InlineKeyboardButton('‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç', callback_data='add_subj')
            markup.add(btn_add)
            
            # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')
            markup.add(btn_back)

            bot.edit_message_text(
                "‚úèÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ üòÄ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —ç–º–æ–¥–∑–∏\n"
                "‚Ä¢ –ù–∞–∂–º–∏—Ç–µ ‚ùå –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ admin_edit_homework: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('hw_emoji_'))
    def change_subject_emoji(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            index = int(call.data.replace('hw_emoji_', ''))
            subject = user_states[call.message.chat.id]['subjects_map'][index]
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —ç–º–æ–¥–∑–∏
            user_states[call.message.chat.id]['state'] = 'waiting_emoji'
            user_states[call.message.chat.id]['subject'] = subject

            markup = types.InlineKeyboardMarkup()
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin_edit_hw')
            markup.add(btn_cancel)

            current_emoji = SUBJECT_EMOJI.get(subject, "üìò")
            bot.edit_message_text(
                f"üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞: {subject}\n"
                f"–¢–µ–∫—É—â–∏–π —ç–º–æ–¥–∑–∏: {current_emoji}\n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —ç–º–æ–¥–∑–∏:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.register_next_step_handler(call.message, process_new_emoji, bot, call.message.message_id)
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ change_subject_emoji: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('hw_edit_'))
    def edit_subject_homework(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return

            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            index = int(call.data.replace('hw_edit_', ''))
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            subject = user_states[call.message.chat.id]['subjects_map'][index]
            
            user_states[call.message.chat.id]['state'] = 'waiting_homework'
            user_states[call.message.chat.id]['subject'] = subject

            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin_edit_hw')
            markup.add(btn_back)

            current_hw = DEFAULT_HOMEWORK_DATA.get(subject, "–ù–µ –∑–∞–¥–∞–Ω–æ")
            emoji = SUBJECT_EMOJI.get(subject, "üìò")
            try:
                bot.edit_message_text(
                    f"üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É: {emoji} {subject}\n\n"
                    f"–¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ:\n{current_hw}\n\n"
                    f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ:",
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    reply_markup=markup
                )
            except Exception as e:
                if "message is not modified" not in str(e):
                    raise e
            
            bot.register_next_step_handler(call.message, process_new_homework, bot, call.message.message_id)
            bot.answer_callback_query(call.id)

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ edit_subject_homework: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('hw_del_'))
    def delete_subject(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            index = int(call.data.replace('hw_del_', ''))
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            subject = user_states[call.message.chat.id]['subjects_map'][index]
            
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
            markup = types.InlineKeyboardMarkup(row_width=2)
            btn_confirm = types.InlineKeyboardButton('‚úÖ –î–∞', callback_data=f'cdel_{index}')
            btn_cancel = types.InlineKeyboardButton('‚ùå –ù–µ—Ç', callback_data='admin_edit_hw')
            markup.add(btn_confirm, btn_cancel)
            
            emoji = SUBJECT_EMOJI.get(subject, "üìò")
            bot.edit_message_text(
                f"‚ùóÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç {emoji} {subject}?",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ delete_subject: {e}")

    @bot.callback_query_handler(func=lambda call: call.data.startswith('cdel_'))
    def confirm_delete_subject(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –ø—Ä–µ–¥–º–µ—Ç–∞
            index = int(call.data.replace('cdel_', ''))
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
            subject = user_states[call.message.chat.id]['subjects_map'][index]
            
            if delete_subject_from_config(subject):
                bot.answer_callback_query(call.id, f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç {subject} —É–¥–∞–ª–µ–Ω")
            else:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            admin_edit_homework(call)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ confirm_delete_subject: {e}")

    @bot.callback_query_handler(func=lambda call: call.data == 'add_subj')
    def add_new_subject(call):
        try:
            if str(call.from_user.id) not in ADMIN_IDS:
                bot.answer_callback_query(call.id, "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                return
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–µ–¥–º–µ—Ç–∞
            user_states[call.message.chat.id] = {
                'state': 'waiting_new_subject'
            }
            
            markup = types.InlineKeyboardMarkup()
            btn_cancel = types.InlineKeyboardButton('‚ùå –û—Ç–º–µ–Ω–∞', callback_data='admin_edit_hw')
            markup.add(btn_cancel)
            
            bot.edit_message_text(
                "üìù –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:",
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                reply_markup=markup
            )
            
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            bot.register_next_step_handler(call.message, process_new_subject, bot, call.message.message_id)
            bot.answer_callback_query(call.id)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ add_new_subject: {e}")

def process_new_subject(message, bot, message_id):
    try:
        if message.chat.id not in user_states or user_states[message.chat.id].get('state') != 'waiting_new_subject':
            return
        
        new_subject = message.text.strip()
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from mybot.config import config
        importlib.reload(config)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç
        if new_subject in config.DEFAULT_HOMEWORK_DATA:
            bot.send_message(message.chat.id, "‚ùå –¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç —Å –ø—É—Å—Ç—ã–º –∑–∞–¥–∞–Ω–∏–µ–º
        if update_homework_data(new_subject, "–ù–µ –∑–∞–¥–∞–Ω–æ"):
            success_text = f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç {new_subject} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.chat.id in user_states:
                del user_states[message.chat.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤', callback_data='admin_edit_hw')
            markup.add(btn_back)
            
            try:
                bot.edit_message_text(
                    success_text,
                    chat_id=message.chat.id,
                    message_id=message_id,
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                bot.send_message(
                    message.chat.id,
                    success_text,
                    reply_markup=markup
                )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_new_subject: {str(e)}")
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞")
        except:
            pass

def process_new_admin_id(message, bot, message_id, register_next):
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.chat.id not in user_states or user_states[message.chat.id] != 'waiting_admin_id':
            return
        
        new_admin_id = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —á–∏—Å–ª–æ–º
        if not new_admin_id.isdigit():
            try:
                bot.send_message(message.chat.id, "‚ùå ID –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–µ–≤–µ—Ä–Ω—ã–º ID
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            register_next()
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω–æ–º
        if new_admin_id in ADMIN_IDS:
            try:
                bot.send_message(message.chat.id, "‚ùå –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∞–¥–º–∏–Ω–∞
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            register_next()
            return

        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        admins = list(ADMIN_IDS)
        admins.append(new_admin_id)
        if not save_admins(admins):
            try:
                bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
                # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID –ø—Ä–∏ –æ—à–∏–±–∫–µ
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {e}")
            return

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.chat.id in user_states:
            del user_states[message.chat.id]

        success_text = ""
        try:
            user = bot.get_chat(new_admin_id)
            success_text = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user.first_name}\n(ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É
            try:
                # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                bot.send_message(
                    new_admin_id,
                    "üéâ –í–∞–º –±—ã–ª–∏ –≤—ã–¥–∞–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!"
                )
                
                # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –º–µ–Ω—é
                markup_new = types.InlineKeyboardMarkup()
                btn_menu = types.InlineKeyboardButton('üìã –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é', callback_data='main_menu')
                markup_new.add(btn_menu)
                bot.send_message(
                    new_admin_id,
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–µ –º–µ–Ω—é:",
                    reply_markup=markup_new
                )
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–æ–≤–æ–º—É –∞–¥–º–∏–Ω—É: {e}")
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
            success_text = f"‚úÖ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (ID: {new_admin_id}) —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!"

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='admin_panel')
            markup.add(btn_back)
            
            bot.edit_message_text(
                success_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=markup
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID: {e}")
                
        except Exception as e:
            if "message is not modified" not in str(e):
                try:
                    bot.send_message(
                        message.chat.id,
                        success_text,
                        reply_markup=markup
                    )
                except Exception as send_error:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—Ö–µ: {send_error}")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_new_admin_id: {e}")
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        except Exception as send_error:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ: {send_error}")

def process_new_homework(message, bot, message_id):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if message.chat.id not in user_states or 'state' not in user_states[message.chat.id]:
            return
        
        if user_states[message.chat.id]['state'] != 'waiting_homework':
            return
        
        subject = user_states[message.chat.id]['subject']
        new_homework = message.text.strip()
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ
        if update_homework_data(subject, new_homework):
            success_text = f"‚úÖ –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject} –æ–±–Ω–æ–≤–ª–µ–Ω–æ!"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.chat.id in user_states:
                del user_states[message.chat.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∑–∞–¥–∞–Ω–∏—è
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤', callback_data='admin_edit_hw')
            markup.add(btn_back)
            
            try:
                bot.edit_message_text(
                    success_text,
                    chat_id=message.chat.id,
                    message_id=message_id,
                    reply_markup=markup
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ
                bot.send_message(
                    message.chat.id,
                    success_text,
                    reply_markup=markup
                )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_new_homework: {str(e)}")
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏—è")
        except:
            pass

def update_homework_data(subject, new_homework):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤ config.py –∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"""
    try:
        config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.py')
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        with open(config_path + '.bak', 'w', encoding='utf-8') as file:
            file.write(content)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        from mybot.config import config
        importlib.reload(config)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
        updated_homework = dict(config.DEFAULT_HOMEWORK_DATA)
        updated_homework[subject] = new_homework
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        hw_dict_str = "DEFAULT_HOMEWORK_DATA = {\n"
        for subj, hw in updated_homework.items():
            hw_dict_str += f'    "{subj}": "{hw}",\n'
        hw_dict_str += "}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        lines = content.split('\n')
        in_hw_data = False
        new_lines = []
        
        for line in lines:
            if line.startswith('DEFAULT_HOMEWORK_DATA'):
                new_lines.append(hw_dict_str)
                in_hw_data = True
            elif in_hw_data and line.strip().startswith('}'):
                in_hw_data = False
                continue
            elif not in_hw_data:
                new_lines.append(line)
        
        new_content = '\n'.join(new_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'w', encoding='utf-8') as file:
            file.write(new_content)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            importlib.reload(config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            global DEFAULT_HOMEWORK_DATA
            DEFAULT_HOMEWORK_DATA = config.DEFAULT_HOMEWORK_DATA
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            from mybot.handlers import homework, menu, base
            importlib.reload(homework)
            importlib.reload(menu)
            importlib.reload(base)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
            importlib.reload(sys.modules[__name__])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ homework_data: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            with open(config_path + '.bak', 'r', encoding='utf-8') as file:
                content = file.read()
            with open(config_path, 'w', encoding='utf-8') as file:
                file.write(content)
        except:
            pass
        return False

def delete_subject_from_config(subject):
    """–£–¥–∞–ª—è–µ—Ç –ø—Ä–µ–¥–º–µ—Ç –∏–∑ config.py"""
    try:
        config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.py')
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        with open(config_path + '.bak', 'w', encoding='utf-8') as file:
            file.write(content)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        from mybot.config import config
        importlib.reload(config)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –±–µ–∑ —É–¥–∞–ª—è–µ–º–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
        updated_homework = dict(config.DEFAULT_HOMEWORK_DATA)
        if subject in updated_homework:
            del updated_homework[subject]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        hw_dict_str = "DEFAULT_HOMEWORK_DATA = {\n"
        for subj, hw in updated_homework.items():
            hw_dict_str += f'    "{subj}": "{hw}",\n'
        hw_dict_str += "}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        lines = content.split('\n')
        in_hw_data = False
        new_lines = []
        
        for line in lines:
            if line.startswith('DEFAULT_HOMEWORK_DATA'):
                new_lines.append(hw_dict_str)
                in_hw_data = True
            elif in_hw_data and line.strip().startswith('}'):
                in_hw_data = False
                continue
            elif not in_hw_data:
                new_lines.append(line)
        
        new_content = '\n'.join(new_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'w', encoding='utf-8') as file:
            file.write(new_content)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥—É–ª–∏
        importlib.reload(config)
        from mybot.handlers import homework
        importlib.reload(homework)
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø—Ä–µ–¥–º–µ—Ç–∞: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            with open(config_path + '.bak', 'r', encoding='utf-8') as file:
                content = file.read()
            with open(config_path, 'w', encoding='utf-8') as file:
                file.write(content)
        except:
            pass
        return False

def process_new_emoji(message, bot, message_id):
    try:
        if message.chat.id not in user_states or 'state' not in user_states[message.chat.id]:
            return
        
        if user_states[message.chat.id]['state'] != 'waiting_emoji':
            return
        
        subject = user_states[message.chat.id]['subject']
        new_emoji = message.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —ç–º–æ–¥–∑–∏
        if len(new_emoji) > 2:  # –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ —ç–º–æ–¥–∑–∏ –∑–∞–Ω–∏–º–∞—é—Ç 2 —Å–∏–º–≤–æ–ª–∞ –≤ UTF-8
            bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —ç–º–æ–¥–∑–∏")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —ç–º–æ–¥–∑–∏
        if update_subject_emoji(subject, new_emoji):
            success_text = f"‚úÖ –≠–º–æ–¥–∑–∏ –¥–ª—è –ø—Ä–µ–¥–º–µ—Ç–∞ {subject} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ {new_emoji}"
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            if message.chat.id in user_states:
                del user_states[message.chat.id]
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —ç–º–æ–¥–∑–∏
            try:
                bot.delete_message(message.chat.id, message.message_id)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            markup = types.InlineKeyboardMarkup()
            btn_back = types.InlineKeyboardButton('‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É –ø—Ä–µ–¥–º–µ—Ç–æ–≤', callback_data='admin_edit_hw')
            markup.add(btn_back)
            
            bot.edit_message_text(
                success_text,
                chat_id=message.chat.id,
                message_id=message_id,
                reply_markup=markup
            )
        else:
            bot.send_message(message.chat.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏")
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ process_new_emoji: {str(e)}")
        try:
            bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏")
        except:
            pass

def update_subject_emoji(subject, new_emoji):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –ø—Ä–µ–¥–º–µ—Ç–∞ –≤ config.py"""
    try:
        config_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'config', 'config.py')
        
        # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'r', encoding='utf-8') as file:
            content = file.read()
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        with open(config_path + '.bak', 'w', encoding='utf-8') as file:
            file.write(content)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        from mybot.config import config
        importlib.reload(config)
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å —ç–º–æ–¥–∑–∏
        updated_emoji = dict(config.SUBJECT_EMOJI)
        updated_emoji[subject] = new_emoji
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å
        emoji_dict_str = "SUBJECT_EMOJI = {\n"
        for subj, emoji in updated_emoji.items():
            emoji_dict_str += f'    "{subj}": "{emoji}",\n'
        emoji_dict_str += "}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
        lines = content.split('\n')
        in_emoji_data = False
        new_lines = []
        
        for line in lines:
            if line.startswith('SUBJECT_EMOJI'):
                new_lines.append(emoji_dict_str)
                in_emoji_data = True
            elif in_emoji_data and line.strip().startswith('}'):
                in_emoji_data = False
                continue
            elif not in_emoji_data:
                new_lines.append(line)
        
        new_content = '\n'.join(new_lines)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ñ–∏–≥
        with open(config_path, 'w', encoding='utf-8') as file:
            file.write(new_content)
        
        # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏
        try:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
            importlib.reload(config)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            global SUBJECT_EMOJI
            SUBJECT_EMOJI = config.SUBJECT_EMOJI
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏
            from mybot.handlers import homework, menu, base
            importlib.reload(homework)
            importlib.reload(menu)
            importlib.reload(base)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–æ–¥—É–ª—å
            importlib.reload(sys.modules[__name__])
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥—É–ª–µ–π: {e}")
        
        return True
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —ç–º–æ–¥–∑–∏: {e}")
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        try:
            with open(config_path + '.bak', 'r', encoding='utf-8') as file:
                content = file.read()
            with open(config_path, 'w', encoding='utf-8') as file:
                file.write(content)
        except:
            pass
        return False
