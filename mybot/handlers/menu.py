from telebot import types
from datetime import datetime
from mybot.database.storage import Storage
from mybot.keyboards.inline import choose_group_selection_keyboard, create_switch_group_keyboard
from mybot.config.config import ADMIN_IDS

# –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
MONTHS_RU = {
    1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è',
    5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞',
    9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è'
}

WEEKDAYS_RU = {
    0: '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 1: '–≤—Ç–æ—Ä–Ω–∏–∫', 2: '—Å—Ä–µ–¥–∞',
    3: '—á–µ—Ç–≤–µ—Ä–≥', 4: '–ø—è—Ç–Ω–∏—Ü–∞', 5: '—Å—É–±–±–æ—Ç–∞', 6: '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
}


def show_main_menu(bot, call):
    storage = Storage()
    user_data = storage.load_data()
    user_id = str(call.from_user.id)

    # –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è
    now = datetime.now()
    current_date = f"{now.day} {MONTHS_RU[now.month]} {now.year}, {WEEKDAYS_RU[now.weekday()]}"
    
    if user_id in user_data and 'group' in user_data[user_id]:
        group = user_data[user_id]['group']
        markup = types.InlineKeyboardMarkup(row_width=2)
        
        if group == 'ir3_23':
            # –ú–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø—ã –ò—Ä3-23
            btn1 = types.InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule_ir3')
            btn2 = types.InlineKeyboardButton('üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ', callback_data='homework_ir3')
            btn3 = types.InlineKeyboardButton('üìö –£—á–µ–±–Ω—ã–π —Å–∞–π—Ç', url='http://site.ru')
            btn4 = types.InlineKeyboardButton('üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='switchgroup')
            markup.add(btn1, btn2)
            markup.add(btn3, btn4)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
            if user_id in ADMIN_IDS:
                btn_admin = types.InlineKeyboardButton('üëë –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', callback_data='admin_panel')
                markup.add(btn_admin)
            
            text = (f"üë§ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {call.from_user.first_name}\n\n"
                    f"–ú–µ–Ω—é –≥—Ä—É–ø–ø—ã: –ò—Ä3-23\n"
                    f"‚è∞ {current_date}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"üìå –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:")
        else:
            # –ú–µ–Ω—é –¥–ª—è –≥—Ä—É–ø–ø—ã "–ë–µ–∑ –≥—Ä—É–ø–ø—ã"
            text = (f"–ú–µ–Ω—é –≥—Ä—É–ø–ø—ã: –ë–µ–∑ –≥—Ä—É–ø–ø—ã\n"
                    f"‚è∞ {current_date}\n"
                    f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                    f"‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É")
            
            markup = types.InlineKeyboardMarkup(row_width=1)
            btn1 = types.InlineKeyboardButton('üîÑ –ó–∞–º–µ–Ω—ã', callback_data='schedule_common')
            btn2 = types.InlineKeyboardButton('üë• –°–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É', callback_data='switchgroup')
            markup.row(btn1)
            markup.row(btn2)
            text = (f"–ú–µ–Ω—é –≥—Ä—É–ø–ø—ã: (–ë–µ–∑ –≥—Ä—É–ø–ø—ã)\n"
                    f'‚è∞ {current_date}\n'
                    f'‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n'
                    f'‚ùóÔ∏è –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É')
    else:
        # –ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
        markup = choose_group_selection_keyboard()
        text = "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:"
        
    if isinstance(call, types.CallbackQuery):
        # –ï—Å–ª–∏ —ç—Ç–æ callback query
        bot.edit_message_text(
            text,
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–ø
        chat_id = call.chat.id if hasattr(call, 'chat') else call.from_user.id
        bot.send_message(
            chat_id=chat_id,
            text=text,
            reply_markup=markup
        )

def register_handlers(bot):
    @bot.callback_query_handler(func=lambda call: call.data == 'main_menu')
    def main_menu_handler(call):
        show_main_menu(bot, call)
        bot.answer_callback_query(call.id)
    
    @bot.callback_query_handler(func=lambda call: call.data == 'switchgroup')
    def switch_group_handler(call):
        markup = create_switch_group_keyboard()
        bot.edit_message_text(
            '–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É?',
            chat_id=call.message.chat.id,
            message_id=call.message.message_id,
            reply_markup=markup
        )
        bot.answer_callback_query(call.id)

    @bot.callback_query_handler(func=lambda call: call.data == 'menu')
    def back_to_menu(call):
        show_main_menu(bot, call)
        bot.answer_callback_query(call.id)
